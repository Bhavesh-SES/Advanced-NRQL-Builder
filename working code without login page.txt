<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Advanced NRQL Query Builder</title>
    <!-- Firebase Compat SDKs -->
    <script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore-compat.js"></script>
    <!-- Select2 -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        /* — your existing styles unchanged — */
        header {
            background: #0077cc;
            color: #fff;
            padding: 20px;
            text-align: center;
            font-size: 24px;
        }

        :root {
            --bg: #f5f9f9;
            --text: #000;
            --card: #fff;
        }

        [data-theme="dark"] {
            --bg: #333;
            --text: #eee;
            --card: #444;
        }

        body {
            margin: 0;
            font-family: Arial;
            background: var(--bg);
            color: var(--text);
        }

        .container {
            padding: 20px;
            max-width: 1200px;
            margin: auto;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .section {
            background: var(--card);
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .row {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }

        select,
        input,
        button,
        textarea {
            padding: 5px;
            font-size: 14px;
        }

        textarea {
            width: 100%;
            height: 100px;
            font-family: monospace;
        }

        .filter-row {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

        .filter-row select,
        .filter-row input {
            min-width: 100px;
        }

        .filter-row button {
            background: red;
            color: #fff;
            border: none;
            cursor: pointer;
            padding: 0 8px;
        }

        #themeToggle {
            position: fixed;
            top: 10px;
            right: 10px;
        }
    </style>
</head>

<body data-theme="light">
    <!-- AUTH SCREEN -->
    <div id="authScreen">
        <h2>Login / Sign Up</h2>
        <input id="emailInput" type="email" placeholder="Email" />
        <input id="passwordInput" type="password" placeholder="Password" />
        <button id="loginBtn">Login</button>
        <button id="signupBtn">Sign Up</button>
        <div id="authMessage" style="color:red;"></div>
    </div>

    <!-- TOOL SCREEN -->
    <div id="toolScreen" style="display:none">
        <header>Advanced NRQL Query Builder</header>
        <button id="themeToggle">Toggle Theme</button>
        <button id="logoutBtn">Log Out</button>
        <div class="container">
            <!-- Table & Column -->
            <div class="section">
                <h2>Table & Column Selection</h2>
                <div class="row">
                    <select id="tableSelect" style="width:200px;"></select>
                    <select id="columnSelect" multiple style="width:400px;"></select>
                </div>
            </div>
            <!-- Aggregation -->
            <div class="section">
                <h2>Aggregation</h2>
                <div class="row">
                    <select id="aggFunc">
                        <option value="">None</option>
                        <option>count</option>
                        <option>uniqueCount</option>
                        <option>average</option>
                        <option>min</option>
                        <option>max</option>
                        <option>sum</option>
                    </select>
                    <select id="aggColumn" style="width:400px"></select>
                </div>
            </div>
            <!-- Timeseries -->
            <div class="section" id="timeseriesSection" style="display:none">
                <h2>Time Series</h2>
                <select id="timeseriesInterval">
                    <option>1 minute</option>
                    <option>5 minutes</option>
                    <option>10 minutes</option>
                    <option>30 minutes</option>
                    <option>1 hour</option>
                </select>
            </div>
            <!-- Filters -->
            <div class="section">
                <h2>Filters (Where)</h2>
                <div id="filterContainer"></div>
                <button onclick="addFilter('AND')">+ AND</button>
                <button onclick="addFilter('OR')">+ OR</button>
            </div>
            <!-- Facet -->
            <div class="section">
                <h2>FACET</h2>
                <select id="facetSelect" multiple style="width:400px"></select>
            </div>
            <!-- Time Range -->
            <div class="section">
                <h2>Time Range</h2>
                <div class="row">
                    <label><input type="radio" name="timeType" value="relative" checked />Relative</label>
                    SINCE <input id="sinceVal" type="number" style="width:60px" />
                    <select id="sinceUnit">
                        <option>minutes</option>
                        <option>hours</option>
                        <option>days</option>
                        <option>weeks</option>
                    </select> ago
                    UNTIL <input id="untilVal" type="number" style="width:60px" />
                    <select id="untilUnit">
                        <option>minutes</option>
                        <option>hours</option>
                        <option>days</option>
                        <option>weeks</option>
                    </select> ago
                </div>
                <div class="row">
                    <label><input type="radio" name="timeType" value="absolute" />Absolute</label>
                    Start: <input id="absStartDate" type="date" /> <input id="absStartTime" type="time" step="1" />
                    End: <input id="absEndDate" type="date" /> <input id="absEndTime" type="time" step="1" />
                </div>
            </div>
            <!-- Limit -->
            <div class="section">
                <h2>Limit</h2>
                <input id="limitInput" type="text" placeholder="e.g. 100 or MAX" style="width:120px" />
            </div>
            <!-- Controls -->
            <div class="section">
                <h2>Query Controls</h2>
                <div class="row">
                    <button id="buildBtn">Build Query</button>
                    <label><input id="autoRefresh" type="checkbox" checked />Auto Refresh</label>
                </div>
            </div>
            <!-- Output -->
            <div class="section">
                <h2>NRQL Output</h2>
                <textarea id="queryOutput" readonly></textarea>
                <button class="copy-btn" onclick="copyQuery()">Copy</button>
            </div>
            <!-- Save/Load/Delete -->
            <div class="section">
                <h2>Save/Load Queries</h2>
                <div class="row">
                    <input id="queryName" type="text" placeholder="Query name" />
                    <button onclick="saveQuery()">Save</button>
                    <select id="savedQueries" style="width:200px"></select>
                    <button id="deleteQueryBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Libraries -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
        // Firebase init
        const ADMIN_UIDS = [
            '53J9oxFwO8hYp5QEIrm66mXL8ry2',  // existing admin
            'aBcDeFgHiJkLmNoPqRsTuVwXyZa'   // new admin UID
        ];
        const firebaseConfig = {
            apiKey: "AIzaSyAo1weIrZh82evreRglzTEKbzReRurVqeA",
            authDomain: "nrql-query-tool.firebaseapp.com",
            projectId: "nrql-query-tool",
            storageBucket: "nrql-query-tool.firebasestorage.app",
            messagingSenderId: "580238875628",
            appId: "1:580238875628:web:09ae949e29ba9646d4bec9",
            measurementId: "G-H5VTX0YMEL"
        };
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth(), db = firebase.firestore();

        // YOUR FULL SCHEMA HERE
        const SCHEMA = {
            PageAction: [
                "timestamp", "anonymous", "apdMode", "assetId", "audioCodec",
                "bandwidthRedundancyRatio", "cdnName", "cirrRecent", "cirrSession",
                "deviceId", "distanceToOrigin", "fixtureId", "hypercare", "isAutoPlay",
                "isTopBitrate", "isWithinLiveWindow", "mediaType", "playbackSources",
                "playerName", "presentationDelay", "qualityLevelRecent",
                "qualityLevelSession", "rotationCount", "sessionId", "sourceCount",
                "sourceIdentifier", "sourceOrigin", "sourceUrl", "stabilityScoreRecent",
                "stabilityScoreSession", "videoCodec", "viewerId", "actionName",
                "activeState", "adManagerName", "adManagerState", "agentVersion",
                "appId", "appModeType", "appModeVariant", "appName", "asn", "asnLatitude",
                "asnLongitude", "asnOrganization", "billingCountry", "boot.launch.target",
                "boot.launch.version.bootstrap", "boot.launch.version.target",
                "browserHeight", "browserWidth", "cacheHit", "cacheKey", "capabilities",
                "category", "categoryName", "cdnIndex", "chapter", "chapterVersion", "city",
                "clientIp", "connectionType", "contentCountry", "core.activityState",
                "core.adapterVersion", "core.bootstrapVersion", "core.chapterName",
                "core.chapterVersion", "core.contentCountry", "core.deviceBrand",
                "core.deviceCpuCount", "core.deviceId", "core.deviceManufacturer",
                "core.deviceModel", "core.deviceOsName", "core.deviceOsVersion",
                "core.deviceRamGb", "core.deviceTier", "core.deviceType",
                "core.deviceUserAgent", "core.firmwareVersion",
                "core.fvDataFileRevision", "core.nrDeviceUuid", "core.partnerId",
                "core.platform", "core.sessionId", "core.userState", "core.userStatus",
                "core.userType", "countryCode", "currentUrl", "daznId", "delayInit",
                "deviceModel", "devicePlatform", "deviceType", "duration", "durationMs",
                "dynamicRange", "endTime", "entityGuid", "environmentGroup", "eventId",
                "firmwareVersion", "firstChunkLoad", "focusedUi", "geoCountry",
                "hasDevelopmentPath", "hasGoogle", "hasToken", "hasYospace", "homeOfX",
                "inactiveModeSupported", "initId", "interruptionReason",
                "isAlibCanaryUser@Dazn/MatchDayPanelWeb",
                "isAlibCanaryUser@Dazn/SportsdataWeb", "isAuthChapter", "isOverlayShown",
                "isPersonalised", "isUmShown", "jwt.expiredIso", "jwt.expires",
                "jwt.issued", "jwt.issuedIso", "language", "languages", "manufacturer",
                "message", "messageState", "muted", "name", "nativeApp",
                "newBootstrapVersion", "newCatalogVersion", "newsLocale",
                "numberOfTiles", "packageName", "packageVersion", "page", "pageUrl",
                "platform", "platformType", "pubbyAction", "pubbyClientConfigured",
                "pubbyClientExists", "randomAbPoint", "reason", "referrerUrl", "regionCode",
                "renderDuration", "routerAction", "routerState", "session",
                "sessionTraceId", "severity", "solutionVersion", "source", "sourceId",
                "spanName", "ssaiSources", "startTime", "startupResponseData", "subPage",
                "success", "timeSinceLoad", "title", "tokenExpired", "tokenTtl",
                "umMessageId", "urlPath", "useExternalAdCdn", "userAgentName",
                "userAgentOs", "userAgentVersion", "userStatus", "viewName", "volume",
                "wasSubscribed"
            ],
            PageView: [
                "timestamp", "agentVersion", "appId", "appModeType", "appModeVariant",
                "appName", "asn", "asnLatitude", "asnLongitude", "asnOrganization",
                "backendDuration", "boot.launch.target", "boot.launch.version.bootstrap",
                "boot.launch.version.target", "browserTransactionName", "city", "clientIp",
                "connectionSetupDuration", "core.adapterVersion", "core.bootstrapVersion",
                "core.deviceBrand", "core.deviceCpuCount", "core.deviceId",
                "core.deviceManufacturer", "core.deviceModel", "core.deviceOsName",
                "core.deviceOsVersion", "core.deviceRamGb", "core.deviceType",
                "core.deviceUserAgent", "core.firmwareVersion", "core.nrDeviceUuid",
                "core.partnerId", "core.platform", "core.sessionId", "countryCode",
                "deviceId", "deviceType", "dnsLookupDuration", "domProcessingDuration",
                "domain", "duration", "entityGuid", "environmentGroup",
                "firstContentfulPaint", "firstPaint", "geoCountry", "hasReplay",
                "manufacturer", "name", "nativeApp", "networkDuration",
                "pageRenderingDuration", "pageTraceId", "pageUrl", "platform",
                "platformType", "queueDuration", "randomAbPoint", "regionCode",
                "secureHandshakeDuration", "session", "sessionId", "sessionTraceId",
                "userAgentName", "userAgentOs", "userAgentVersion", "viewerId",
                "webAppDuration"
            ],
            JavaScriptError: [
                "timestamp", "actionText", "activeState", "agentVersion", "alib", "appId",
                "appModeType", "appModeVariant", "appName", "asn", "asnLatitude",
                "asnLongitude", "asnOrganization", "billingCountry",
                "boot.launch.target", "boot.launch.version.bootstrap",
                "boot.launch.version.target", "browserInteractionId", "browserStackHash",
                "caughtInPackage", "caughtInPackageVersion", "chapter", "chapterVersion",
                "city", "clientIp", "code", "contentCountry", "core.adapterVersion",
                "core.bootstrapVersion", "core.chapterName", "core.chapterVersion",
                "core.contentCountry", "core.deviceBrand", "core.deviceCpuCount",
                "core.deviceId", "core.deviceManufacturer", "core.deviceModel",
                "core.deviceOsName", "core.deviceOsVersion", "core.deviceRamGb",
                "core.deviceTier", "core.deviceType", "core.deviceUserAgent",
                "core.firmwareVersion", "core.fvDataFileRevision", "core.nrDeviceUuid",
                "core.partnerId", "core.platform", "core.sessionId", "core.userState",
                "core.userStatus", "core.userType", "countryCode", "daznId", "description",
                "deviceId", "deviceModel", "devicePlatform", "deviceType", "domain",
                "durationMs", "endpoint", "entityGuid", "environmentGroup", "eraroCode",
                "erroName", "errorCategory", "errorClass", "errorCode", "errorId",
                "errorInfo", "errorMessage", "errorStatus", "errorTag", "errorType",
                "firmwareVersion", "firstErrorInSession", "firstOccurrenceTimestamp",
                "geoCountry", "inApp", "inactiveModeSupported",
                "isAlibCanaryUser@Dazn/MatchDayPanelWeb",
                "isAlibCanaryUser@Dazn/SportsdataWeb", "isAuthChapter", "isAutoRefresh",
                "jwt.expiredIso", "jwt.expires", "jwt.issued", "jwt.issuedIso", "manufacturer",
                "name", "nativeApp", "newsLocale", "packageEntryPath", "packageName",
                "packageVersion", "pageCountry", "pageLanguage", "pageUrl",
                "parentEventId", "payload", "platform", "platformType", "randomAbPoint",
                "regionCode", "releaseIds", "request", "requestUri", "response", "retries",
                "safeMode", "service", "session", "sessionTraceId", "source", "sourceCaller",
                "stackHash", "stackTrace", "startupResponseData", "status", "statusCode",
                "transactionName", "unhandledPromiseRejection", "userAgentName",
                "userAgentOs", "userAgentVersion", "userStatus", "viewerId",
                "zendeskLocale"
            ],
            AjaxRequest: [
                "timestamp", "agentVersion", "appId", "appModeType", "appModeVariant",
                "appName", "asn", "boot.launch.version.bootstrap",
                "boot.launch.version.target", "chapter", "city", "clientIp",
                "contentCountry", "core.activityState", "core.adapterVersion",
                "core.bootstrapVersion", "core.chapterName", "core.chapterVersion",
                "core.contentCountry", "core.deviceBrand", "core.deviceCpuCount",
                "core.deviceId", "core.deviceManufacturer", "core.deviceModel",
                "core.deviceOsName", "core.deviceOsVersion", "core.deviceRamGb",
                "core.deviceTier", "core.deviceType", "core.deviceUserAgent",
                "core.firmwareVersion", "core.fvDataFileRevision", "core.nrDeviceUuid",
                "core.partnerId", "core.platform", "core.sessionId", "core.userState",
                "core.userStatus", "core.userType", "countryCode", "daznId", "deviceId",
                "deviceType", "entityGuid", "geoCountry", "hostname", "httpMethod",
                "httpResponseCode", "isAuthChapter", "language", "manufacturer",
                "nativeApp", "pageUrl", "platform", "platformType", "regionCode",
                "requestBodySize", "requestUrl", "responseBodySize", "session",
                "sessionTraceId", "startupResponseData", "timeToLoadEventStart",
                "trace.id", "userId", "userStatus", "uuid", "version", "viewerId"
            ]
        };

        // Populate table dropdown and wire up select2
        function initSchema() {
            const $t = $('#tableSelect').empty();
            Object.keys(SCHEMA).forEach(tbl => $t.append(new Option(tbl, tbl)));
            $t.select2({ placeholder: 'Search tables…', width: '200px' })
                .on('change', populateCols)
                .val('').trigger('change');
        }
        function populateCols() {
            const cols = SCHEMA[$('#tableSelect').val()] || [];
            $('#columnSelect').empty().append(new Option('*', '*'));
            cols.forEach(c => $('#columnSelect').append(new Option(c, c)));
            ['#facetSelect', '#aggColumn'].forEach(sel => {
                const $s = $(sel).empty(); cols.forEach(c => $s.append(new Option(c, c)));
            });
        }

        // Dedupe helpers
        function addFilter(type = 'AND') {
            const row = $('<div class="filter-row"></div>');
            const op = $('<select><option>AND</option><option>OR</option></select>').val(type);
            const col = $('<select class="filter-column"></select>');
            (SCHEMA[$('#tableSelect').val()] || []).forEach(c => col.append(new Option(c, c)));
            const cond = $('<select><option>=</option><option>!=</option><option>LIKE</option>'
                + '<option>IN</option><option>NOT IN</option><option>BETWEEN</option>'
                + '<option>EXISTS</option><option>IS NULL</option><option>IS NOT NULL</option>'
                + '</select>');
            const val = $('<input type="text" placeholder="Enter value(s)…">');
            const del = $('<button>❌</button>').click(() => row.remove());
            row.append(op, col, cond, val, del).appendTo('#filterContainer');
            col.select2({ width: '200px', placeholder: 'Column…', allowClear: true });
        }
        let autoId;
        function startAuto() { autoId = setInterval(buildQuery, 1000); }
        function stopAuto() { clearInterval(autoId); }

        function buildQuery() {
            if (!$('#tableSelect').val()) { return; }
            let q = 'SELECT ';
            const agg = $('#aggFunc').val(), aCol = $('#aggColumn').val();
            const cols = $('#columnSelect').val() || ['*'];
            q += agg ? `${agg}(${aCol})` : cols.join(', ');
            q += ` FROM ${$('#tableSelect').val()}`;
            const parts = [];
            $('#filterContainer .filter-row').each((i, row) => {
                const $r = $(row), op = $r.find('select').eq(0).val(),
                    col = $r.find('select').eq(1).val(),
                    cond = $r.find('select').eq(2).val(),
                    raw = $r.find('input').val() || '', v = cond.match(/IN|NOT IN/) ? `(${raw.split(',').map(x => " '" + x.trim() + "'").join(',')})`
                        : cond === 'BETWEEN' ? raw
                            : /NULL|EXISTS/.test(cond) ? ''
                                : `'${raw}'`;
                let clause = `${col} ${cond}` + (v ? ` ${v}` : '');
                parts.push(i ? `${op} ${clause}` : clause);
            });
            if (parts.length) q += ` WHERE ${parts.join(' ')}`;
            const f = $('#facetSelect').val(); if (f && f.length) q += ` FACET ${f.join(', ')}`;
            if (agg) {
                const ts = $('#timeseriesInterval').val();
                if (ts) q += ` TIMESERIES ${ts}`;
            }
            if ($('input[name="timeType"]:checked').val() === 'absolute') {
                const s = $('#absStartDate').val() + ' ' + $('#absStartTime').val(),
                    e = $('#absEndDate').val() + ' ' + $('#absEndTime').val();
                if (s) q += ` SINCE '${s}'`; if (e) q += ` UNTIL '${e}'`;
            } else {
                const sv = $('#sinceVal').val(), su = $('#sinceUnit').val(),
                    uv = $('#untilVal').val(), uu = $('#untilUnit').val();
                if (sv) q += ` SINCE ${sv} ${su} ago`; if (uv) q += ` UNTIL ${uv} ${uu} ago`;
            }
            const lim = $('#limitInput').val(); if (lim) q += ` LIMIT ${lim}`;
            $('#queryOutput').val(q);
        }

        function copyQuery() { navigator.clipboard.writeText($('#queryOutput').val()); }

        function saveQuery() {
            const name = $('#queryName').val().trim();
            if (!name) return alert('Please enter a name for your query.');
            const state = {
                table: $('#tableSelect').val() || '',               // never undefined
                columns: $('#columnSelect').val() || [],             // always an array
                aggFunc: $('#aggFunc').val() || '',
                aggColumn: $('#aggColumn').val() || '',
                filters: $('#filterContainer .filter-row').map((i, row) => {
                    const [op, col, cond, val] = row.children;
                    return {
                        op: op.value || 'AND',
                        col: col.value || '',
                        cond: cond.value || '=',
                        val: val.value || ''
                    };
                }).get(),
                facets: $('#facetSelect').val() || [],
                timeType: $('input[name="timeType"]:checked').val() || 'relative',
                since: {
                    num: $('#sinceVal').val() || '',
                    unit: $('#sinceUnit').val() || 'minutes'
                },
                until: {
                    num: $('#untilVal').val() || '',
                    unit: $('#untilUnit').val() || 'minutes'
                },
                abs: {
                    startDate: $('#absStartDate').val() || '',
                    startTime: $('#absStartTime').val() || '',
                    endDate: $('#absEndDate').val() || '',
                    endTime: $('#absEndTime').val() || ''
                },
                timeseries: $('#timeseriesInterval').val() || '',
                limit: $('#limitInput').val() || ''
            };
            db.collection('queries').doc(name).set(state)
                .then(loadSaved)
                .catch(e => alert('Save failed: ' + e.message));
            console.log('Saving state:', state);

        }

        function loadQuery(name) {
            if (!name) return;
            // Stop the auto‐refresh so it doesn’t stomp on us while we set things up
            stopAuto();

            db.collection('queries').doc(name).get().then(doc => {
                if (!doc.exists) return alert('Saved query not found!');
                const s = doc.data();

                // 1) Restore table → triggers populateCols() to rebuild column/facet/Agg lists
                $('#tableSelect').val(s.table).trigger('change');

                // 2) After columns & selects are repopulated, restore the rest
                setTimeout(() => {
                    // Columns
                    $('#columnSelect').val(s.columns).trigger('change');

                    // Aggregation
                    $('#aggFunc').val(s.aggFunc).trigger('change');
                    $('#aggColumn').val(s.aggColumn).trigger('change');

                    // Filters: clear & rebuild each row
                    $('#filterContainer').empty();
                    s.filters.forEach(f => {
                        addFilter(f.op);
                        const $row = $('#filterContainer .filter-row').last();
                        $row.find('select').eq(1).val(f.col).trigger('change');
                        $row.find('select').eq(2).val(f.cond);
                        $row.find('input').val(f.val);
                    });

                    // Facets
                    $('#facetSelect').val(s.facets).trigger('change');

                    // Time settings
                    $('input[name="timeType"][value="' + s.timeType + '"]')
                        .prop('checked', true);
                    $('#sinceVal').val(s.since.num);
                    $('#sinceUnit').val(s.since.unit);
                    $('#untilVal').val(s.until.num);
                    $('#untilUnit').val(s.until.unit);
                    $('#absStartDate').val(s.abs.startDate);
                    $('#absStartTime').val(s.abs.startTime);
                    $('#absEndDate').val(s.abs.endDate);
                    $('#absEndTime').val(s.abs.endTime);

                    // Timeseries & limit
                    $('#timeseriesInterval').val(s.timeseries);
                    $('#limitInput').val(s.limit);

                    // Finally, kick auto‐refresh back on if checked
                    if ($('#autoRefresh').prop('checked')) startAuto();

                }, 100);
            }).catch(err => {
                alert('Error loading query: ' + err.message);
            });
        }


        function loadSaved() {
            db.collection('queries').get().then(snapshot => {
                const sel = $('#savedQueries').empty().append('<option value="">-- Load --</option>');
                snapshot.forEach(doc => sel.append(new Option(doc.id, doc.id)));
            });
        }

        // Auth & init
        auth.onAuthStateChanged(async user => {
            // Show/hide login vs. tool screens
            $('#authScreen').toggle(!user);
            $('#toolScreen').toggle(!!user);
            if (!user) return;

            // Fetch token with custom claims and check for an "admin" flag
            const { claims } = await user.getIdTokenResult();
            const isAdmin = !!claims.admin;

            // Only admins see the Delete button
            $('#deleteQueryBtn').toggle(isAdmin);

            // Initialize your tool UI exactly as before
            initSchema();
            $('#columnSelect,#facetSelect,#aggColumn')
                .select2({ width: '200px', placeholder: 'Select…' });
            $('#aggFunc').on('change', e => $('#timeseriesSection').toggle(!!e.target.value));
            $('#buildBtn').click(buildQuery);
            $('#autoRefresh').change(e => e.target.checked ? startAuto() : stopAuto());
            $('#savedQueries').change(e => loadQuery(e.target.value));
            $('#deleteQueryBtn').click(() => {
                const n = $('#savedQueries').val();
                if (!n) return alert('Select one');
                db.collection('queries').doc(n).delete().then(loadSaved);
            });

            // Finally load your saved queries
            loadSaved();
        });

        $('#autoRefresh').off('change').on('change', e => e.target.checked ? startAuto() : stopAuto());
        $('#signupBtn').click(() => auth.createUserWithEmailAndPassword($('#emailInput').val(), $('#passwordInput').val())
            .catch(e => $('#authMessage').text(e.message)));
        $('#loginBtn').click(() => auth.signInWithEmailAndPassword($('#emailInput').val(), $('#passwordInput').val())
            .catch(e => $('#authMessage').text(e.message)));
        $('#themeToggle').click(() => document.body.dataset.theme = document.body.dataset.theme === 'light' ? 'dark' : 'light');
        $('#logoutBtn').click(() => {
            firebase.auth().signOut()
                .then(() => {
                    // optional: clear UI, show auth screen
                    $('#toolScreen').hide();
                    $('#authScreen').show();
                })
                .catch(err => alert('Sign-out error: ' + err.message));
        });


    </script>
</body>
</html>
